<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wellnesstracker/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wellnesstracker/MainActivity.kt" />
              <option name="originalContent" value="package com.example.wellnesstracker&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatDelegate&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.navOptions&#10;import androidx.navigation.ui.setupWithNavController&#10;import androidx.preference.PreferenceManager&#10;import com.example.wellnesstracker.WellnessWidget&#10;import com.example.wellnesstracker.databinding.ActivityMainBinding&#10;import com.example.wellnesstracker.util.HydrationScheduler&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    // Explicit intent actions for direct navigation&#10;    companion object {&#10;        const val ACTION_SHOW_HABITS = &quot;com.example.wellnesstracker.SHOW_HABITS&quot;&#10;        const val ACTION_SHOW_MOOD = &quot;com.example.wellnesstracker.SHOW_MOOD&quot;&#10;        const val ACTION_SHOW_SETTINGS = &quot;com.example.wellnesstracker.SHOW_SETTINGS&quot;&#10;        const val EXTRA_NAVIGATE_TO = &quot;navigate_to&quot; // values: habits|mood|settings&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)&#10;        enableEdgeToEdge()&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment)&#10;        binding.bottomNav.setupWithNavController(navController)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Initialize default values for preferences (only once)&#10;        PreferenceManager.setDefaultValues(this, R.xml.preferences, false)&#10;&#10;        // Request notification permission on API 33+&#10;        requestNotificationPermissionIfNeeded()&#10;&#10;        // Schedules periodic hydration reminders&#10;        HydrationScheduler.schedule(this)&#10;&#10;        // Ensure home-screen widget shows latest progress when app is opened&#10;        WellnessWidget.updateAll(this)&#10;&#10;        // Handle any explicit navigation intent that launched the Activity&#10;        handleIntent(intent)&#10;    }&#10;&#10;    override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // Handle explicit navigation intents while activity is in foreground&#10;        handleIntent(intent)&#10;    }&#10;&#10;    // Handles explicit intents for fragment navigation via NavController&#10;    private fun handleIntent(intent: Intent?) {&#10;        val navController = findNavController(R.id.nav_host_fragment)&#10;        val dest = when {&#10;            intent == null -&gt; null&#10;            // Accept either explicit actions or a simple string extra&#10;            ACTION_SHOW_HABITS == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;habits&quot; -&gt; R.id.habitFragment&#10;            ACTION_SHOW_MOOD == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;mood&quot; -&gt; R.id.moodFragment&#10;            ACTION_SHOW_SETTINGS == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;settings&quot; -&gt; R.id.settingsFragment&#10;            else -&gt; null&#10;        }&#10;        dest?.let { destinationId -&gt;&#10;            val current = navController.currentDestination?.id&#10;            if (current != destinationId) {&#10;                val options = navOptions {&#10;                    // Simple fade-like behavior by avoiding default slide animations&#10;                    anim {&#10;                        enter = android.R.anim.fade_in&#10;                        exit = android.R.anim.fade_out&#10;                        popEnter = android.R.anim.fade_in&#10;                        popExit = android.R.anim.fade_out&#10;                    }&#10;                    // Pop up to the start to avoid deep stacks if launched repeatedly&#10;                    popUpTo(R.id.habitFragment) { inclusive = false }&#10;                }&#10;                navController.navigate(destinationId, null, options)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun requestNotificationPermissionIfNeeded() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            val permission = Manifest.permission.POST_NOTIFICATIONS&#10;            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {&#10;                ActivityCompat.requestPermissions(this, arrayOf(permission), 100)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.wellnesstracker&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.app.AppCompatDelegate&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.navigation.NavController&#10;import androidx.navigation.navOptions&#10;import androidx.navigation.ui.setupWithNavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.preference.PreferenceManager&#10;import com.example.wellnesstracker.WellnessWidget&#10;import com.example.wellnesstracker.databinding.ActivityMainBinding&#10;import com.example.wellnesstracker.util.HydrationScheduler&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var navController: NavController&#10;&#10;    // Explicit intent actions for direct navigation&#10;    companion object {&#10;        const val ACTION_SHOW_HABITS = &quot;com.example.wellnesstracker.SHOW_HABITS&quot;&#10;        const val ACTION_SHOW_MOOD = &quot;com.example.wellnesstracker.SHOW_MOOD&quot;&#10;        const val ACTION_SHOW_SETTINGS = &quot;com.example.wellnesstracker.SHOW_SETTINGS&quot;&#10;        const val EXTRA_NAVIGATE_TO = &quot;navigate_to&quot; // values: habits|mood|settings&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)&#10;        enableEdgeToEdge()&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        // Obtain NavController from the NavHostFragment directly to avoid relying on view tags&#10;        val hostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment&#10;            ?: throw IllegalStateException(&quot;NavHostFragment not found in activity_main layout&quot;)&#10;        navController = hostFragment.navController&#10;        binding.bottomNav.setupWithNavController(navController)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Initialize default values for preferences (only once)&#10;        PreferenceManager.setDefaultValues(this, R.xml.preferences, false)&#10;&#10;        // Request notification permission on API 33+&#10;        requestNotificationPermissionIfNeeded()&#10;&#10;        // Schedules periodic hydration reminders&#10;        HydrationScheduler.schedule(this)&#10;&#10;        // Ensure home-screen widget shows latest progress when app is opened&#10;        WellnessWidget.updateAll(this)&#10;&#10;        // Handle any explicit navigation intent that launched the Activity&#10;        handleIntent(intent)&#10;    }&#10;&#10;    override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // Handle explicit navigation intents while activity is in foreground&#10;        handleIntent(intent)&#10;    }&#10;&#10;    // Handles explicit intents for fragment navigation via NavController&#10;    private fun handleIntent(intent: Intent?) {&#10;        val dest = when {&#10;            intent == null -&gt; null&#10;            // Accept either explicit actions or a simple string extra&#10;            ACTION_SHOW_HABITS == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;habits&quot; -&gt; R.id.habitFragment&#10;            ACTION_SHOW_MOOD == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;mood&quot; -&gt; R.id.moodFragment&#10;            ACTION_SHOW_SETTINGS == intent.action || intent.getStringExtra(EXTRA_NAVIGATE_TO) == &quot;settings&quot; -&gt; R.id.settingsFragment&#10;            else -&gt; null&#10;        }&#10;        dest?.let { destinationId -&gt;&#10;            val current = navController.currentDestination?.id&#10;            if (current != destinationId) {&#10;                val options = navOptions {&#10;                    // Simple fade-like behavior by avoiding default slide animations&#10;                    anim {&#10;                        enter = android.R.anim.fade_in&#10;                        exit = android.R.anim.fade_out&#10;                        popEnter = android.R.anim.fade_in&#10;                        popExit = android.R.anim.fade_out&#10;                    }&#10;                    // Pop up to the start to avoid deep stacks if launched repeatedly&#10;                    popUpTo(R.id.habitFragment) { inclusive = false }&#10;                }&#10;                navController.navigate(destinationId, null, options)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun requestNotificationPermissionIfNeeded() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            val permission = Manifest.permission.POST_NOTIFICATIONS&#10;            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {&#10;                ActivityCompat.requestPermissions(this, arrayOf(permission), 100)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>